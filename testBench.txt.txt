P1:

const int maxn = 2000;
int a[1000];
int n;

int x, y;
int solve(){
	int res, i;
	int temp;
	res = 0;
	i = 1;
	while(i <= n){
		if(a[i] < res) return (0);
		a[i] = a[i] - res;
		temp = a[i] / 2;
		a[i] = a[i] - temp * 2;
		res = 0;
		if(a[i] != 0) res = 1;
		i = i + 1;
	}
	if(res == 0) return (1);
	return (0);
}

void main(){
	int i, temp, ok;
	scanf(n);
	i = 1;
	while(i <= n){
		scanf(temp);
		a[i] = temp;
		i = i + 1;
	}
	ok = solve();
	if(ok != 0) printf("YES");
	if(ok == 0) printf("NO");
}


4
1 2 1 2
YES

3
1 0 1
NO

3
1 3 1
NO

10
0 0 5 9 9 3 9 9 10
YES

1
0
YES

2
0 0
YES

5 
1 1 1 0 1
NO

-------------------------------------------------------------------------------------------------------------
P2:
const int maxn = 2000;
int a[2000];
int fa[2000];
int cnt;
int ans[2000];
int sz[2000];

int getFather(int x){
	if(fa[x] == -1){
		fa[x] = x;
		return (fa[x]);
	}
	if(fa[x] == x){
		return (x);
	}

	fa[x] = getFather(fa[x]);
	return (fa[x]);
}

void main(){
	int n, i, x;
	int lhs, rhs;
	int ok, id;
	int cnt;
	scanf(n);
	i = 1;
	while(i <= n){
		scanf(x);
		a[i] = x;
		i = i + 1;
	}
	i = 0;
	while(i <= (n + 10)){
		fa[i] = -1;
		i = i + 1;
	}
	i = 1;
	while(i <= n){
		ans[i] = a[i];
		i = i + 1;
	}
	i = 1;
	while(i <= n){
		if(a[i] != i){
			lhs = getFather(i);
			rhs = getFather(a[i]);
			if(fa[a[i]] == i) i = i + 1;
			if(fa[a[i]] != i){
				fa[lhs] = rhs;
				sz[rhs] = sz[rhs] + sz[lhs];
				i = i + 1;
			}
		}
		if(a[i] == i) i = i + 1;
	}
	i = 1;
	while(i <= n){
		getFather(i);
		i = i + 1;
	}
	ok = 0;
	id = 0;
	i = 1;
	while(i <= n){
		if(ok != 0) i = n + 1;
		if(ok == 0){
			if(fa[i] != i) i = i + 1;
			if(fa[i] == i){
				if(a[i] == i){
					ok = 1;
					id = i;
				}
				if(ok == 0) id = i;
				i = i + 1;
			}
		}
	}
	if(ok != 0) cnt = 0;
	if(ok == 0) cnt = 1;
	i = 1;
	while(i <= n){
		if(fa[i] != i) i = i + 1;
		if(fa[i] == i){
			ans[i] = id;
			if(i != id) cnt = cnt + 1;
			i = i + 1;
		}
	}
	printf(cnt);
	printf("\n");
	printf(ans[1]);
	i = 2;
	while(i <= n){
		printf(" ");
		printf(ans[i]);
		i = i + 1;
	}
	printf("\n");
}
INPUT
4
2 3 3 4
OUTPUT
1
2 3 3 3

INPUT
8
2 3 5 4 1 6 6 7
OUTPUT
2
2 3 5 4 4 4 6 7


INPUT
6
6 2 6 2 4 2
OUTPUT
0
6 2 6 2 4 2

INPUT
7
1 2 3 4 5 6 7
OUTPUT
6
1 1 1 1 1 1 1
----------------------------------------------------------------------------------------------------------------
P3:



const int mod = 1000000007;

int p[100], q[100];
int key[100];

int max(int a, int b) {
	if (a > b) return (a);
	return (b);
}

int MOD(int x, int y) {
	return (x - x / y * y);
}

int power(int a, int p) {
	int temp, ans;
	int tmp;
	ans = 1;
	a = MOD(a, mod);
	while (p > 0) {
		tmp = MOD(p, 2);
		switch (tmp) {
		case 1: {
			ans = MOD(ans * a, mod);
		}
		case 0:;
		default:;
		}
		a = MOD(a * a, mod);
		p = p / 2;
	}
	return (ans);
}

void main() {
	int ans, maxi, m, a[100], i;
	int tem;
	ans = 1;
	maxi = -1;
	i = 0;
	scanf(m);
	i = 0;
	while (i < m) {
		scanf(tem);
		a[tem] = a[tem] + 1;
		maxi = max(maxi, tem);
		i = i + 1;
	}
	tem = 1;
	p[0] = 1;
	i = 1;
	while (i <= maxi) {
		p[i] = MOD(p[i - 1] * (1 + a[i]), mod - 1);
		i = i + 1;
	}
	q[maxi] = MOD(1 + a[maxi], mod - 1);
	q[maxi + 1] = 1;
	i = maxi - 1;
	while (i >= 0) {
		q[i] = MOD(q[i + 1] * (1 + a[i]), mod - 1);
		i = i - 1;
	}
	i = 1;
	while (i <= maxi) {
		key[i] = MOD(p[i - 1] * q[i + 1], mod - 1);
		i = i + 1;
	}
	i = 2;
	while (i <= maxi) {
		tem = power(i, a[i] * (a[i] + 1) / 2);
		ans = MOD(ans * power(tem, key[i]), mod);
		i = i + 1;
	}
	printf(ans);
	printf("\n");
	return;
}

INPUT
2
2 3
OUTPUT
36

INPUT 
3
2 3 2
OUTPUT
1728

5
2 2 2 2 2
32768




------------------------------------------------------------------------------------------------------
P4:

int max(int x, int y){
	int z, res;
	z = 0;
	if(x > y) z = 1;
	switch(z){
		case 0:  res = y;
		default: res = x;
	}
	return (res);
}

void main(){
	int x, y;
	char z;
	scanf(x, y);
	x = f(x, y);
	z = x;
	print(z);
}

----------------------------------------------------------
const int columnLen = 30;
char s[1000];
int c[30000];

int at(int row, int col){
	return (row * columnLen + col);
}

int cal(int pos){
	int stk[30];
	int delta;
	int i;
	stk[0] = 0;
	i = 0;
	while(i < 26){
		delta = c[at(pos + 26, i)] - c[at(pos, i)];
		if(delta > 1) return (0);
		if(delta == 0){
			stk[0] = stk[0] + 1;
			stk[stk[0]] = i;
		}
		i = i + 1;
	}
	stk[0] = 0;
	i = 0;
	while(i < 26){
		if(s[pos + i] == '?'){
			stk[0] = 1 + stk[0];
			s[pos + i] = stk[stk[0]] + 'A';
		}
		i = i + 1;
	}
	return (1);
}

void main(){
	int n, i, j, ok;
	int set;
	scanf(n);
	i = 0;
	while(i < n){
		scanf(s[i]);
		i = i + 1;
	}
	i = 0;
	while(i < 30000){
		c[i] = 0;
		i = i + 1;
	}
	i = 1;
	while(i < n){
		j = 0;
		while(j < 26){
			c[at(i, j)] = c[at(i - 1, j)];
			j = 1 + j;
		}
		if(s[i - 1] != '?'){
			c[at(i, s[i - 1] - 'A')] = 1 + 
			c[at(i, s[i - 1] - 'A')];
		}
		i = i + 1;
	}
	ok = 0;
	i = 0;
	while(i < n){
		set = 0;
		if(ok == 0){
			set = 0;
			if(i + 26 <= n){
				set = 1;
				ok = cal(i);
				if(ok != 0) i = i + 25;
				if(ok == 0){
					if(s[i] == '?') s[i] = 'A';
				}
				i = i + 1;
			}
			if(set == 0){
				i = n + 1;
			}
			set = 1;
		}
		if(set == 0){
			if(s[i] == '?') s[i] = 'A';
			i = i + 1;
		}
	}
	if(ok == 0){
		printf("-1\n");
	}
	if(ok != 0){
		i = 0;
		while(i < n) printf(s[i]);
		printf("\n");
	}
	return;
}
--------------------------------------------------------------
const int matrixLen = 13;
const int sLen = 65;
int matrix[225];
char s[400];
int buffer[100];

int atM(int x, int y) {
	return (x * matrixLen + y);
}

int atS(int x, int y) {
	return (x * sLen + y);
}
char getCharIdx(int idx) {
	if (idx == 0) return ('H');
	return ('O');
}

void clrBuf() {
	int i;
	i = 0;
	while (i < 100) {
		buffer[i] = 0;
		i = i + 1;
	}
}

void readMatrix(int n) {
	int i, j;
	int tmp;
	i = 1;
	while (i <= n) {
		j = 1;
		while (j <= n) {
			scanf(tmp);
			matrix[atM(i, j)] = tmp;
			j = j + 1;
		}
		i = i + 1;
	}
}

void print1(int len) {
	int i;
	i = 1;
	while (i <= len) {
		printf("*");
		i = i + 1;
	}
}

void printS(int row) {
	int k;
	char tmp;
	k = 0;
	while (1 == 1) {
		if (s[atS(row, k)] == '\0') {
			printf("\n");
			return;
		}
		printf(s[atS(row, k)]);
		k = k + 1;
	}
}

void main() {
	int n, kase, i;
	int k, u;
	int j;
	int cnt;
	int set;
	int v;
	int ii;
	int set1;
	kase = 0;
	scanf(n);
	clrBuf();
	readMatrix(n);
	printf("Case ", kase + 1);
	printf(":\n\n");
	kase = kase + 1;
	print1(4 * n + 3);
	printf("\n");
	i = 1;
	while (i <= n) {
		set = 0;
		s[atS(0, 0)] = '*';
		k = 1;
		u = 0;
		j = 1;
		while (j <= n) {
			cnt = matrix[atM(i, j)] + 2;
			while (cnt > 0) {
				cnt = cnt - 1;
				s[atS(0, k)] = getCharIdx(u);
				k = k + 1;
				if (cnt != 0) {
					s[atS(0, k)] = '-';
					k = k + 1;
				}
				u = 1 - u;
			}
			if (j == n) s[atS(0, k)] = '*';
			if (j != n) s[atS(0, k)] = ' ';
			k = k + 1;
			s[atS(0, k)] = '\0';
			j = j + 1;
		}
		printS(0);
		if (i == n) {
			u = 0;
			while (u < k) {
				printf("*");
				u = u + 1;
			}
			printf("\n");
			set = 1;
			i = i + 1;
		}
		if (set == 0) {
			v = 1;
			while (v <= n) {
				set1 = 0;
				if (matrix[atM(i, v)] == 1) {
					buffer[v] = 0;
					set1 = 1;
				}
				if (matrix[atM(i, v)] == -1) {
					buffer[v] = 1;
					set1 = 1;
				}
				if (set1 == 0) {
					if (i == 1) buffer[v] = 1;
				}
				v = v + 1;
			}
			ii = 0;
			while (ii < k) {
				s[atS(1, ii)] = ' ';
				s[atS(2, ii)] = ' ';
				s[atS(3, ii)] = ' ';
				ii = ii + 1;
			}

			s[atS(1, 0)] = '*';
			s[atS(1, k - 1)] = '*';
			s[atS(2, 0)] = '*';
			s[atS(2, k - 1)] = '*';
			s[atS(3, 0)] = '*';
			s[atS(3, k - 1)] = '*';

			s[atS(1, k)] = '\0';
			s[atS(2, k)] = '\0';
			s[atS(3, k)] = '\0';
			u = 1;
			while (u <= n) {
				if (buffer[u] != 0) s[atS(1, 4 * u - 1)] = '|';
				if (buffer[u] == 0) s[atS(3, 4 * u - 1)] = '|';
				s[atS(2, 4 * u - 1)] = getCharIdx(9);
				u = u + 1;
			}
			u = 1;
			while (u <= 3) {
				printS(u);
				u = u + 1;
			}

			i = i + 1;
		}
	}
	printf("\n");
}

-------------------------------------------------------------------------------------------------------
const int maxn = 100000;
const int maxm = 1050;
const int mod = 1000000007;

int n;

int point[2000];
int point1[2000];
int f[100];


int l[4000], r[4000], cnt[4000];
int res[4000], lazy[4000];

int at(int i, int j) {
	return (i * 2 + j);
}

int MOD(int x) {
	int y;
	y = x / mod;
	return (x - y * mod);
}

void push_up(int u) {
	cnt[u] = cnt[u * 2] + cnt[ u * 2 + 1];
	res[u] = MOD(res[u * 2] + res[u * 2 + 1]);
}

void build(int u, int _l, int _r) {
	int mid;
	l[u] = _l;
	r[u] = _r;
	cnt[u] = 0;
	res[u] = 0;
	lazy[u] = 1;
	if (_r - _l < 2) return;
	mid = (_l + _r) / 2;
	build(u * 2, _l, mid);
	build(u * 2 + 1, mid, _r);
}

int isOdd(int x) {
	int y;
	y = x / 2;
	x = x - y * 2;
	if (x == 0) return (0);
	return (1);
}

int power(int a, int p) {
	int ans;
	ans = 1;
	a = MOD(a);
	while (p) {
		if (isOdd(p)) ans = MOD(ans * a);
		p = p / 2;
		a = MOD(a * a);
	}
	return (ans);
}

void push_down(int u) {
	int ret;
	ret = 0;
	if(r[u] - l[u] < 2) ret = 1;
	if(lazy[u] == 1) ret = 1;
	if(ret) return;
	res[u * 2] = MOD(res[u * 2] * lazy[u]);
	res[ u * 2 + 1] = MOD(res[ u * 2 + 1] * lazy[u]);
	lazy[u * 2] = MOD(lazy[u * 2] * lazy[u]);
	lazy[ u * 2 + 1] = MOD(lazy[ u * 2 + 1] * lazy[u]);
	lazy[u] = 1;
}

int query(int u, int _l, int _r, int L, int R) {
	int ret, mid;
	ret = 1;
	if(L != _l) ret = 0;
	if(_r != R) ret = 0;
	if(ret) return (cnt[u]);
	push_down(u);
	mid = (_l + _r) / 2;
	if (R <= mid) return (query(u * 2, _l, mid, L, R));
	if (L >= mid) return (query( u * 2 + 1, mid, _r, L, R));
	return (MOD(query(u * 2, _l, mid, L, mid) + query( u * 2 + 1, mid, _r, mid, R)));
}

void Insert(int u, int _l, int _r, int L, int R, int w) {
	int mid, ret;
	ret = 1;
	if(L != _l) ret = 0;
	if(_r != R) ret = 0;
	if (ret) {
		res[u] = MOD(res[u] + w);
		cnt[u] = 1 + cnt[u];
		return;
	}
	push_down(u);
	mid = (_l + _r) / 2;
	if (R <= mid) Insert(u * 2, _l, mid, L, R, w);
	if (R > mid) Insert( u * 2 + 1, mid, _r, L, R, w);
	push_up(u);
}

int query1(int u, int _l, int _r, int L, int R) {
	int mid, ret;
	ret = 1;
	if(L != _l) ret = 0;
	if(_r != R) ret = 0;
	if (ret) return (res[u]);
	push_down(u);
	mid = (_l + _r) / 2;
	if (R <= mid) return (query1(u * 2, _l, mid, L, R));
	if (L >= mid) return (query1( u * 2 + 1, mid, _r, L, R));
	return (MOD(query1(u * 2, _l, mid, L, mid) + query1(u * 2 + 1, mid, _r, mid, R)));
}

void update(int u, int _l, int _r, int L, int R) {
	int mid, ret;
	ret = 1;
	if(L != _l) ret = 0;
	if(_r != R) ret = 0;
	if (ret) {
		lazy[u] = MOD(2 * lazy[u]);
		res[u] = MOD(2 * res[u]);
		return;
	}
	push_down(u);
	mid = (_l + _r) / 2;
	if (R <= mid) {
		update(u * 2, _l, mid, L, R);
		return;
	}
	if (L >= mid) {
		update(u * 2 + 1, mid, _r, L, R);
		return;
	}
	update(u * 2, _l, mid, L, mid);
	update(u * 2 + 1, mid, _r, mid, R);
}

void swap1(int i, int j) {
	int tem1, tem2;
	tem1 = point[at(i, 0)];
	tem2 = point[at(i, 1)];
	point[at(i, 0)] = point[at(j, 0)];
	point[at(i, 1)] = point[at(j, 1)];
	point[at(j, 0)] = tem1;
	point[at(j, 1)] = tem2;
}

void swap2(int i, int j) {
	int tem1, tem2;
	tem1 = point1[at(i, 0)];
	tem2 = point1[at(i, 1)];
	point1[at(i, 0)] = point1[at(j, 0)];
	point1[at(i, 1)] = point1[at(j, 1)];
	point1[at(j, 0)] = tem1;
	point1[at(j, 1)] = tem2;
}

void sort1() {
	int i, j;
	i = 1;
	while (i < n) {
		j = i + 1;
		while (j <= n) {
			if (point[at(i, 0)] > point[at(j, 0)]) {
				swap1(i, j);
			}
			j = j + 1;
		}
		i = i + 1;
	}
}

void sort2() {
	int i, j;
	i = 1;
	while (i < n) {
		j = i + 1;
		while (j <= n) {
			if (point1[at(i, 0)] > point1[at(j, 0)]) {
				swap2(i, j);
			}
			j = j + 1;
		}
		i = i + 1;
	}
}

void read_n() {
	scanf(n);
}

void read() {
	int i, x, y;
	i = 1;
	while (i <= n) {
		scanf(x, y);
		point[at(i, 0)] = x;
		point[at(i, 1)] = y;
		i = i + 1;
	}
}

void main() {
	int i, ans, base;
	int cnt1, cnt2, tem1, tem2;
	int bmp;
	while (1 == 1) {
		read_n();
		if (n == -1) return;
		read();
		sort1();
		i = 1;
		while (i <= n) {
			point1[at(i, 0)] = point[at(i, 1)];
			point1[at(i, 1)] = i;
			i = i + 1;
		}
		sort2();
		base = 1;
		f[point1[at(1, 1)]] = 1;
		i = 2;
		while (i <= n) {
			bmp = 0;
			if (point1[at(i, 0)] == point1[at(i - 1, 0)]) bmp = 1;
			if (bmp == 1) {
				f[point1[at(i, 1)]] = base;
				i = i + 1;
			}
			if (bmp == 0) {
				base = 1 + base;
				f[point1[at(i, 1)]] = base;
				i = i + 1;
			}
		}
		build(1, 1, base + 1);
		ans = 0;
		i = 1;
		while(i <= n){
			cnt1 = query(1, 1, base + 1, 1, f[i] + 1);

			ans = MOD(ans + MOD(MOD(power(2, cnt1) * power(2, point[at(i, 0)])) * power(3, point[at(i, 1)])));
			tem1 = 0;
			if (f[i] < base) tem1 = query1(1, 1, base + 1, f[i] + 1, base + 1);
			ans = MOD(ans + MOD(tem1 * power(2, point[at(i, 0)])));
			cnt2 = 0;
			if (f[i] > 1) cnt2 = query(1, 1, base + 1, 1, f[i]);
			tem2 = MOD(power(2, cnt2) * power(3, point[at(i, 1)]));
			update(1, 1, base + 1, f[i], base + 1);
			Insert(1, 1, base + 1, f[i], f[i] + 1, tem2);
			i = i + 1;
		}
		printf(ans);
		printf("\n");
	}
}

2
0 1
1 0
3
1 2
2 1
1 2

11
174